package main

import (
	"encoding/json"
	"fmt"
	"log"
	"math/rand"
	"net/http"
	"os"
	"strconv"
	"strings"
	"time"

	"github.com/gorilla/handlers"
	"github.com/gorilla/mux"
	"github.com/patrickmn/go-cache"

	"github.com/shokujinjp/markov-menu/pkg/markov"
	"github.com/shokujinjp/shokujinjp-sdk-go/shokujinjp"
)

const location = "Asia/Tokyo"

var (
	c = cache.New(1*time.Hour, 2*time.Hour)
)

const (
	cacheKeyALL = "all"
)

func loggingMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		start := time.Now()
		next.ServeHTTP(w, r)
		duration := time.Since(start)

		accessLog := struct {
			Method   string `json:"method"`
			Path     string `json:"path"`
			Duration string `json:"duration"`
		}{
			Method:   r.Method,
			Path:     r.URL.Path,
			Duration: duration.String(),
		}

		logData, _ := json.Marshal(accessLog)
		log.Println(string(logData))
	})
}

func index(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	fmt.Fprintf(w, `{"health": "ok"}`)
}

func menuAll(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")

	all, found := c.Get(cacheKeyALL)
	if !found {
		values, err := shokujinjp.GetMenuAllData()
		if err != nil {
			log.Printf("failed to GetMenuAllData: %v", err)
			w.WriteHeader(http.StatusInternalServerError)
			return
		}
		c.Set(cacheKeyALL, values, cache.DefaultExpiration)
		all = values
	}

	jb, err := json.Marshal(all)
	if err != nil {
		log.Printf("failed to json.Marshal: %v", err)
		w.WriteHeader(http.StatusInternalServerError)
		return
	}

	fmt.Fprint(w, string(jb))
}

func menuToday(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")

	todayTime := time.Now().Format(shokujinjp.DayFormat)

	today, found := c.Get(todayTime)
	if !found {
		values, err := shokujinjp.GetMenuDateData(time.Now())
		if err != nil {
			log.Printf("failed to GetMenuDateData: %v", err)
			w.WriteHeader(http.StatusInternalServerError)
			return
		}
		c.Set(todayTime, values, cache.DefaultExpiration)
		today = values
	}

	sortedToday := shokujinjp.SortByCategory((today).([]shokujinjp.Menu))
	jb, err := json.Marshal(sortedToday)
	if err != nil {
		log.Printf("failed to json.Marshal: %v", err)
		w.WriteHeader(http.StatusInternalServerError)
		return
	}

	fmt.Fprint(w, string(jb))
}

func jokeMarkov(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")

	all, found := c.Get(cacheKeyALL)
	if !found {
		values, err := shokujinjp.GetMenuAllData()
		if err != nil {
			log.Printf("failed to GetMenuAllData: %v", err)
			w.WriteHeader(http.StatusInternalServerError)
			return
		}
		c.Set(cacheKeyALL, values, cache.DefaultExpiration)
		all = values
	}

	parsed, err := markov.Parse((all).([]shokujinjp.Menu))
	if err != nil {
		log.Printf("failed to markov.Parse: %v", err)
		w.WriteHeader(http.StatusInternalServerError)
		return
	}
	chain := markov.GenerateChain(parsed)
	chain = markov.TrimSystemMessages(chain)

	rand.Seed(time.Now().UnixNano())
	price := rand.Intn(100000)

	menu := shokujinjp.Menu{
		Id:          "joke",
		Name:        strings.Join(chain, ""),
		Price:       strconv.Itoa(price),
		Category:    shokujinjp.NoCategory.String(),
		DayStart:    "",
		DayEnd:      "",
		CanWeekday:  "",
		Description: "joke menu generated by markov chain",
	}
	jb, err := json.Marshal(menu)
	if err != nil {
		log.Printf("failed to json.Marshal: %v", err)
		w.WriteHeader(http.StatusInternalServerError)
		return
	}

	fmt.Fprint(w, string(jb))
}

func main() {
	port := os.Getenv("PORT")
	if port == "" {
		port = "8080"
	}

	loc, err := time.LoadLocation(location)
	if err != nil {
		loc = time.FixedZone(location, 9*60*60)
	}
	time.Local = loc

	allowedHeaders := handlers.AllowedHeaders([]string{"X-Requested-With"})
	allowedOrigins := handlers.AllowedOrigins([]string{"*"})
	allowedMethods := handlers.AllowedMethods([]string{"GET", "HEAD", "POST", "PUT", "DELETE", "OPTIONS"})

	log.SetFlags(log.LstdFlags | log.Lshortfile)

	router := mux.NewRouter()
	router.Use(loggingMiddleware)
	router.Path("/").HandlerFunc(index)

	rMenu := router.PathPrefix("/menu").Subrouter()
	rMenu.Path("/all").HandlerFunc(menuAll)
	rMenu.Path("/today").HandlerFunc(menuToday)

	router.Path("/joke/markov").HandlerFunc(jokeMarkov)

	if err := http.ListenAndServe(":"+port, handlers.CORS(allowedHeaders, allowedOrigins, allowedMethods)(router)); err != nil {
		log.Fatal("ListenAndServe: ", err)
	}

}
