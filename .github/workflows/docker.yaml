name: docker
on:
  push:
    branches:
      - "**"

env:
  DOCKER_IMAGE_NAME: shokujinjp/api
  ARCH_CC_MAP: '{"amd64":{"gcc":"", "package": "gcc", "goarch": "amd64"}, "arm32v7":{"gcc":"aarch64-linux-gnu-gcc", "package": "gcc-arm-none-eabi", "goarch": "arm"}, "arm64v8":{"gcc":"aarch64-linux-gnu-gcc", "package": "gcc-aarch64-linux-gnu", "goarch": "arm64"}}'

jobs:
  docker-build:
    name: docker build
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        arch:
          - amd64
          - arm32v7
          - arm64v8
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
      - name: define CC
        run: echo ::set-env name=CC::$(echo '${{ env.ARCH_CC_MAP }}' | jq -r . | jq .${{ matrix.arch }}.gcc )
      - name: define GOARCH
        run: echo ::set-env name=GOARCH::$(echo '${{ env.ARCH_CC_MAP }}' | jq -r . | jq .${{ matrix.arch }}.goarch )
      - name: define PACKAGE
        run: echo ::set-env name=PACKAGE::$(echo '${{ env.ARCH_CC_MAP }}' | jq -r . | jq .${{ matrix.arch }}.package )
      - name: install package
        run: |
          sudo apt update -y -qq
          sudo apt install -y build-essential
          sudo apt install -y ${PACKAGE}
      - name: go build
        run: go build .
        env:
          GOOS: linux
      - name: docker build
        run: docker build -t ${{ env.DOCKER_IMAGE_NAME }}:latest-${{ matrix.arch }} --no-cache --build-arg arch=${{ matrix.arch }} .