name: docker
on:
  push:
    branches:
      - "**"

env:
  DOCKER_IMAGE_NAME: shokujinjp/api
  ARCH_CC_MAP: '{"amd64":{"gcc":"", "goarch": "amd64"}, "arm32v7":{"gcc":"aarch64-linux-gnu-gcc", "goarch": "arm"}, "arm64v8":{"gcc":"aarch64-linux-gnu-gcc", "goarch": "arm64"}}'

jobs:
  docker-build:
    name: docker build
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        arch:
          - amd64
          - arm32v7
          - arm64v8
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
      - name: define CC
        run: echo ::set-env name=CC::$(echo '${{ toJSON(env.ARCH_CC_MAP) }}' | jq .${{ matrix.arch }}.gcc )
      - name: define GOARCH
        run: echo ::set-env name=CC::$(echo '${{ toJSON(env.ARCH_CC_MAP) }}' | jq .${{ matrix.arch }}.goarch )
      - name: apt update
        run: sudo apt update -y
      - name: install gcc
        run: sudo apt install -y ${CC}
        if: ${{ env.CC != "" }}
      - name: go build
        run: go build .
        env:
          GOOS: linux
      - name: docker build
        run: docker build -t ${{ env.DOCKER_IMAGE_NAME }}:latest-${{ matrix.arch }} --no-cache --build-arg arch=${{ matrix.arch }} .